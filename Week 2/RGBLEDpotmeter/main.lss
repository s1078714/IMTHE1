
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001bc  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000029  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b5  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e6  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ed  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e4  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int adc_value;        //Variable om de waarde van de ADC converter in op te slaan

int main(void)
{
//	DDRB |= (1<<PB7);    ///PB5 is output
	DDRB = 0b11100000;
  90:	80 ee       	ldi	r24, 0xE0	; 224
  92:	84 b9       	out	0x04, r24	; 4

	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));  		//Prescaler at 128 so we have an 125Khz clock source
  94:	80 91 7a 00 	lds	r24, 0x007A
  98:	87 60       	ori	r24, 0x07	; 7
  9a:	80 93 7a 00 	sts	0x007A, r24
	ADMUX |= (1<<REFS0);
  9e:	80 91 7c 00 	lds	r24, 0x007C
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 93 7c 00 	sts	0x007C, r24
	ADMUX &= ~(1<<REFS1);               				//Avcc(+5v) as voltage reference
  a8:	80 91 7c 00 	lds	r24, 0x007C
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 93 7c 00 	sts	0x007C, r24
	//ADCSRA &= ~((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0));    //ADC in free-running mode
	//ADCSRB &= ~((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0));    //ADC in free-running mode
	ADCSRA |= (1<<ADATE);                				//Signal source, in this case is the free-running
  b2:	80 91 7a 00 	lds	r24, 0x007A
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1<<ADEN);                				//Power up the ADC
  bc:	80 91 7a 00 	lds	r24, 0x007A
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1<<ADSC);                				//Start converting
  c6:	80 91 7a 00 	lds	r24, 0x007A
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 93 7a 00 	sts	0x007A, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	40 e1       	ldi	r20, 0x10	; 16
  d2:	57 e2       	ldi	r21, 0x27	; 39
		 adc_value = ADCW;
		 if(adc_value >= 0 && adc_value < 126)
		 {

			 _delay_ms(5);PORTB &= ~(1<<PB7);
			 PORTB ^= 1 << PB6;
  d4:	70 e4       	ldi	r23, 0x40	; 64
		 else if(adc_value >= 127 && adc_value < 254)
		 {

				_delay_ms(5);PORTB |= (0<<PB7);
			 PORTB &= ~(1<<PB6);
			 PORTB ^= 1 << PB5;
  d6:	60 e2       	ldi	r22, 0x20	; 32
	ADCSRA |= (1<<ADEN);                				//Power up the ADC
	ADCSRA |= (1<<ADSC);                				//Start converting

	while(1)
	{
		 adc_value = ADCW;
  d8:	20 91 78 00 	lds	r18, 0x0078
  dc:	30 91 79 00 	lds	r19, 0x0079
		 if(adc_value >= 0 && adc_value < 126)
  e0:	2e 37       	cpi	r18, 0x7E	; 126
  e2:	31 05       	cpc	r19, r1
  e4:	38 f4       	brcc	.+14     	; 0xf4 <main+0x64>
  e6:	ca 01       	movw	r24, r20
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x58>
		 {

			 _delay_ms(5);PORTB &= ~(1<<PB7);
  ec:	2f 98       	cbi	0x05, 7	; 5
			 PORTB ^= 1 << PB6;
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	87 27       	eor	r24, r23
  f2:	24 c0       	rjmp	.+72     	; 0x13c <main+0xac>
			 PORTB |= (0<<PB5);
		 }
		 else if(adc_value >= 127 && adc_value < 254)
  f4:	c9 01       	movw	r24, r18
  f6:	8f 57       	subi	r24, 0x7F	; 127
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	8f 37       	cpi	r24, 0x7F	; 127
  fc:	91 05       	cpc	r25, r1
  fe:	48 f4       	brcc	.+18     	; 0x112 <main+0x82>
 100:	ca 01       	movw	r24, r20
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x72>
		 {

				_delay_ms(5);PORTB |= (0<<PB7);
 106:	85 b1       	in	r24, 0x05	; 5
 108:	85 b9       	out	0x05, r24	; 5
			 PORTB &= ~(1<<PB6);
 10a:	2e 98       	cbi	0x05, 6	; 5
			 PORTB ^= 1 << PB5;
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	86 27       	eor	r24, r22
 110:	17 c0       	rjmp	.+46     	; 0x140 <main+0xb0>
		 }
		 else if(adc_value >= 255 && adc_value < 512)
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	21 50       	subi	r18, 0x01	; 1
 118:	31 40       	sbci	r19, 0x01	; 1
 11a:	50 f4       	brcc	.+20     	; 0x130 <main+0xa0>
 11c:	ca 01       	movw	r24, r20
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x8e>
		 {

				_delay_ms(5);PORTB ^= 1 << PB7;
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 58       	subi	r24, 0x80	; 128
 126:	85 b9       	out	0x05, r24	; 5
			 PORTB |= (0<<PB6);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	85 b9       	out	0x05, r24	; 5
			 PORTB &= ~(1<<PB5);
 12c:	2d 98       	cbi	0x05, 5	; 5
 12e:	d4 cf       	rjmp	.-88     	; 0xd8 <main+0x48>
 130:	ca 01       	movw	r24, r20
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0xa2>
		 }
		 else
		 {

			 _delay_ms(5);PORTB |= (0<<PB7);
 136:	85 b1       	in	r24, 0x05	; 5
 138:	85 b9       	out	0x05, r24	; 5
			 PORTB |= (0<<PB6);
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	85 b9       	out	0x05, r24	; 5
			 PORTB |= (0<<PB5);
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	85 b9       	out	0x05, r24	; 5
 142:	ca cf       	rjmp	.-108    	; 0xd8 <main+0x48>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
