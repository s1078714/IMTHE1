
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000250  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000044  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e9  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000125  00000000  00000000  0000049d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000249  00000000  00000000  000005c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011b  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <displayRechts>:


}

displayRechts(cijferRechts)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	2a 97       	sbiw	r28, 0x0a	; 10
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
	char cijfer[10];
	cijfer[1] = 0b00000110; // 1
  a4:	26 e0       	ldi	r18, 0x06	; 6
  a6:	2a 83       	std	Y+2, r18	; 0x02
	cijfer[2] = 0b11011011; // 2
  a8:	2b ed       	ldi	r18, 0xDB	; 219
  aa:	2b 83       	std	Y+3, r18	; 0x03
	cijfer[3] = 0b01001111; // 3
  ac:	2f e4       	ldi	r18, 0x4F	; 79
  ae:	2c 83       	std	Y+4, r18	; 0x04
	cijfer[4] = 0b01100110; // 4
  b0:	26 e6       	ldi	r18, 0x66	; 102
  b2:	2d 83       	std	Y+5, r18	; 0x05
	cijfer[5] = 0b01101101; // 5
  b4:	2d e6       	ldi	r18, 0x6D	; 109
  b6:	2e 83       	std	Y+6, r18	; 0x06
	cijfer[6] = 0b01111101; // 6
  b8:	2d e7       	ldi	r18, 0x7D	; 125
  ba:	2f 83       	std	Y+7, r18	; 0x07
	cijfer[7] = 0b00000111; // 7
  bc:	27 e0       	ldi	r18, 0x07	; 7
  be:	28 87       	std	Y+8, r18	; 0x08
	cijfer[8] = 0b11111111; // 8
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	29 87       	std	Y+9, r18	; 0x09
	cijfer[9] = 0b11101111; // 9
  c4:	2f ee       	ldi	r18, 0xEF	; 239
  c6:	2a 87       	std	Y+10, r18	; 0x0a
	cijfer[0] = 0b00111111; // 0
  c8:	2f e3       	ldi	r18, 0x3F	; 63
  ca:	29 83       	std	Y+1, r18	; 0x01

	PORTC = 0b0100000;
  cc:	20 e2       	ldi	r18, 0x20	; 32
  ce:	28 b9       	out	0x08, r18	; 8
	PORTD = cijfer[cijferRechts];
  d0:	fe 01       	movw	r30, r28
  d2:	e8 0f       	add	r30, r24
  d4:	f9 1f       	adc	r31, r25
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	8b b9       	out	0x0b, r24	; 11
}
  da:	2a 96       	adiw	r28, 0x0a	; 10
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <displayLinks>:

displayLinks(cijferLinks)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	2a 97       	sbiw	r28, 0x0a	; 10
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
	char cijfer[10];
	cijfer[1] = 0b00000110; // 1
 100:	26 e0       	ldi	r18, 0x06	; 6
 102:	2a 83       	std	Y+2, r18	; 0x02
	cijfer[2] = 0b11011011; // 2
 104:	2b ed       	ldi	r18, 0xDB	; 219
 106:	2b 83       	std	Y+3, r18	; 0x03
	cijfer[3] = 0b01001111; // 3
 108:	2f e4       	ldi	r18, 0x4F	; 79
 10a:	2c 83       	std	Y+4, r18	; 0x04
	cijfer[4] = 0b01100110; // 4
 10c:	26 e6       	ldi	r18, 0x66	; 102
 10e:	2d 83       	std	Y+5, r18	; 0x05
	cijfer[5] = 0b01101101; // 5
 110:	2d e6       	ldi	r18, 0x6D	; 109
 112:	2e 83       	std	Y+6, r18	; 0x06
	cijfer[6] = 0b01111101; // 6
 114:	2d e7       	ldi	r18, 0x7D	; 125
 116:	2f 83       	std	Y+7, r18	; 0x07
	cijfer[7] = 0b00000111; // 7
 118:	27 e0       	ldi	r18, 0x07	; 7
 11a:	28 87       	std	Y+8, r18	; 0x08
	cijfer[8] = 0b11111111; // 8
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	29 87       	std	Y+9, r18	; 0x09
	cijfer[9] = 0b11101111; // 9
 120:	2f ee       	ldi	r18, 0xEF	; 239
 122:	2a 87       	std	Y+10, r18	; 0x0a
	cijfer[0] = 0b00000000; // 0
 124:	19 82       	std	Y+1, r1	; 0x01

	PORTC = 0b0010000;
 126:	20 e1       	ldi	r18, 0x10	; 16
 128:	28 b9       	out	0x08, r18	; 8
	PORTD = cijfer[cijferLinks];
 12a:	fe 01       	movw	r30, r28
 12c:	e8 0f       	add	r30, r24
 12e:	f9 1f       	adc	r31, r25
 130:	81 81       	ldd	r24, Z+1	; 0x01
 132:	8b b9       	out	0x0b, r24	; 11
}
 134:	2a 96       	adiw	r28, 0x0a	; 10
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <main>:
#include <avr/delay.h>

int i;

int main(void)
{
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
	DDRD = 0b11111111; // bit1 == output, bit0 == input
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b0110000;
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	87 b9       	out	0x07, r24	; 7
 158:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15a:	c0 ed       	ldi	r28, 0xD0	; 208
 15c:	d7 e0       	ldi	r29, 0x07	; 7
 15e:	01 c0       	rjmp	.+2      	; 0x162 <main+0x1c>
 160:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t secs = 0;

	while (1)
	{
		for( i=0;i<10;i++)
 162:	10 92 01 01 	sts	0x0101, r1
 166:	10 92 00 01 	sts	0x0100, r1
		{

			displayLinks(secs/10);
 16a:	81 2f       	mov	r24, r17
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__udivmodqi4>
 172:	f8 2e       	mov	r15, r24
			_delay_ms(1);
			displayRechts(secs%10);
 174:	81 2f       	mov	r24, r17
 176:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__udivmodqi4>
 17a:	09 2f       	mov	r16, r25
 17c:	17 c0       	rjmp	.+46     	; 0x1ac <main+0x66>
	while (1)
	{
		for( i=0;i<10;i++)
		{

			displayLinks(secs/10);
 17e:	8f 2d       	mov	r24, r15
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 76 00 	call	0xec	; 0xec <displayLinks>
 186:	ce 01       	movw	r24, r28
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x42>
			_delay_ms(1);
			displayRechts(secs%10);
 18c:	80 2f       	mov	r24, r16
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 48 00 	call	0x90	; 0x90 <displayRechts>
 194:	ce 01       	movw	r24, r28
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x50>

	uint8_t secs = 0;

	while (1)
	{
		for( i=0;i<10;i++)
 19a:	80 91 00 01 	lds	r24, 0x0100
 19e:	90 91 01 01 	lds	r25, 0x0101
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 01 01 	sts	0x0101, r25
 1a8:	80 93 00 01 	sts	0x0100, r24
 1ac:	80 91 00 01 	lds	r24, 0x0100
 1b0:	90 91 01 01 	lds	r25, 0x0101
 1b4:	0a 97       	sbiw	r24, 0x0a	; 10
 1b6:	1c f3       	brlt	.-58     	; 0x17e <main+0x38>
			displayRechts(secs%10);
			_delay_ms(1);


		}
		if (secs == 100)
 1b8:	14 36       	cpi	r17, 0x64	; 100
 1ba:	91 f2       	breq	.-92     	; 0x160 <main+0x1a>
		{
			secs = 0;
		}
		else
		{
			secs++;
 1bc:	1f 5f       	subi	r17, 0xFF	; 255
 1be:	d1 cf       	rjmp	.-94     	; 0x162 <main+0x1c>

000001c0 <__udivmodqi4>:
 1c0:	99 1b       	sub	r25, r25
 1c2:	79 e0       	ldi	r23, 0x09	; 9
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <__udivmodqi4_ep>

000001c6 <__udivmodqi4_loop>:
 1c6:	99 1f       	adc	r25, r25
 1c8:	96 17       	cp	r25, r22
 1ca:	08 f0       	brcs	.+2      	; 0x1ce <__udivmodqi4_ep>
 1cc:	96 1b       	sub	r25, r22

000001ce <__udivmodqi4_ep>:
 1ce:	88 1f       	adc	r24, r24
 1d0:	7a 95       	dec	r23
 1d2:	c9 f7       	brne	.-14     	; 0x1c6 <__udivmodqi4_loop>
 1d4:	80 95       	com	r24
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
