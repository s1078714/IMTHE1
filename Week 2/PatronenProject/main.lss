
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002c  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000031d  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ee  00000000  00000000  000004f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000252  00000000  00000000  000005e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fd  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000158  00000000  00000000  00000969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <patroonTonen>:
		}*/
	}
}

patroonTonen(patroon)
{
  80:	ac 01       	movw	r20, r24
	if (patroon == 1)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	91 05       	cpc	r25, r1
  86:	81 f4       	brne	.+32     	; 0xa8 <patroonTonen+0x28>
	{
		// multiplexen, coooode
		// vierkant (borders)
		PORTD = 0b11111000;
  88:	88 ef       	ldi	r24, 0xF8	; 248
  8a:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b01110000;
  8c:	80 e7       	ldi	r24, 0x70	; 112
  8e:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	20 ed       	ldi	r18, 0xD0	; 208
  92:	37 e0       	ldi	r19, 0x07	; 7
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <patroonTonen+0x16>
		_delay_ms(1);
		PORTD = 0b10001000;
  9a:	88 e8       	ldi	r24, 0x88	; 136
  9c:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000000;
  9e:	15 b8       	out	0x05, r1	; 5
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <patroonTonen+0x22>
  a6:	24 c0       	rjmp	.+72     	; 0xf0 <patroonTonen+0x70>
		_delay_ms(1);
	}
	if (patroon == 2)
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	91 05       	cpc	r25, r1
  ac:	51 f4       	brne	.+20     	; 0xc2 <patroonTonen+0x42>
	{
		// multiplexen, coooode
		// ruit
		PORTD = 0b00000000;
  ae:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0b00000000;
  b0:	15 b8       	out	0x05, r1	; 5
  b2:	80 ed       	ldi	r24, 0xD0	; 208
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	fc 01       	movw	r30, r24
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <patroonTonen+0x38>
		_delay_ms(1);
		PORTD = 0b00000000;
  bc:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0b00000000;
  be:	15 b8       	out	0x05, r1	; 5
  c0:	0a c0       	rjmp	.+20     	; 0xd6 <patroonTonen+0x56>
		_delay_ms(1);
		PORTD = 0b00000000;
		PORTB = 0b00000000;
		_delay_ms(1);
	}
	if (patroon == 3)
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	91 05       	cpc	r25, r1
  c6:	19 f0       	breq	.+6      	; 0xce <patroonTonen+0x4e>
		_delay_ms(1);
		PORTD = 0b00000000;
		PORTB = 0b00000000;
		_delay_ms(1);
	}
	if (patroon == 4)
  c8:	84 30       	cpi	r24, 0x04	; 4
  ca:	91 05       	cpc	r25, r1
  cc:	89 f4       	brne	.+34     	; 0xf0 <patroonTonen+0x70>
	{
		// multiplexen, coooode
		// driehoek
		PORTD = 0b00000000;
  ce:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0b00000000;
  d0:	15 b8       	out	0x05, r1	; 5
  d2:	80 ed       	ldi	r24, 0xD0	; 208
  d4:	97 e0       	ldi	r25, 0x07	; 7
  d6:	fc 01       	movw	r30, r24
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <patroonTonen+0x58>
		_delay_ms(1);
		PORTD = 0b00000000;
  dc:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0b00000000;
  de:	15 b8       	out	0x05, r1	; 5
  e0:	fc 01       	movw	r30, r24
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <patroonTonen+0x62>
		_delay_ms(1);
		PORTD = 0b00000000;
  e6:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0b00000000;
  e8:	15 b8       	out	0x05, r1	; 5
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <patroonTonen+0x6a>
  ee:	08 95       	ret
		_delay_ms(1);
	}
	if (patroon == 5)
  f0:	45 30       	cpi	r20, 0x05	; 5
  f2:	51 05       	cpc	r21, r1
  f4:	81 f4       	brne	.+32     	; 0x116 <patroonTonen+0x96>
	{
		// multiplexen, coooode
		// gevuld vierkant
		PORTD = 0b00000000;
  f6:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0b00000000;
  f8:	15 b8       	out	0x05, r1	; 5
  fa:	80 ed       	ldi	r24, 0xD0	; 208
  fc:	97 e0       	ldi	r25, 0x07	; 7
  fe:	fc 01       	movw	r30, r24
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <patroonTonen+0x80>
		_delay_ms(1);
		PORTD = 0b00000000;
 104:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0b00000000;
 106:	15 b8       	out	0x05, r1	; 5
 108:	fc 01       	movw	r30, r24
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <patroonTonen+0x8a>
		_delay_ms(1);
		PORTD = 0b00000000;
 10e:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0b00000000;
 110:	15 b8       	out	0x05, r1	; 5
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <patroonTonen+0x92>
		_delay_ms(1);
	}
}
 116:	08 95       	ret

00000118 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	DDRD = 0b11111000; // blauw || groen
 11c:	88 ef       	ldi	r24, 0xF8	; 248
 11e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11111000; // geel || wit
 120:	84 b9       	out	0x04, r24	; 4
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for( i=0;i<10;i++)
		{

			// patroon tonen, methode ophalen
			patroonTonen(patroon);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 40 00 	call	0x80	; 0x80 <patroonTonen>
	int patroon = 1; // reset naar eerste patroon, voor het leesgemak begint patroon bij 1 (patroon 1, patroon 2 enz enz)
	int i;

	while(1)
	{
		for( i=0;i<10;i++)
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	ca 30       	cpi	r28, 0x0A	; 10
 132:	d1 05       	cpc	r29, r1
 134:	b4 f7       	brge	.-20     	; 0x122 <main+0xa>
 136:	f7 cf       	rjmp	.-18     	; 0x126 <main+0xe>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
