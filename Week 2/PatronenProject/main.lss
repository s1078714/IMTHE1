
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002c  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000420  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ff  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000252  00000000  00000000  00000721  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000126  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000178  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  78:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <patroonTonen>:
		}*/
	}
}

patroonTonen(patroon)
{
  80:	ac 01       	movw	r20, r24
	int langsteTijd = 1500; // in microseconden (us)

	if (patroon == 1)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	91 05       	cpc	r25, r1
  86:	81 f4       	brne	.+32     	; 0xa8 <patroonTonen+0x28>
	{
		// multiplexen, coooode
		// vierkant (leeg)
		// met potmeter: toont alle leds behalve 2 buitenste randen parallel aan groene draden
		PORTD = 0b11111000;
  88:	88 ef       	ldi	r24, 0xF8	; 248
  8a:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b01110000; // 2 randen langs groene draden
  8c:	80 e7       	ldi	r24, 0x70	; 112
  8e:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	2c ed       	ldi	r18, 0xDC	; 220
  92:	35 e0       	ldi	r19, 0x05	; 5
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <patroonTonen+0x16>
		_delay_us(750);

		PORTD = 0b10001000;
  9a:	88 e8       	ldi	r24, 0x88	; 136
  9c:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000000; // 2 randen langs witte draden
  9e:	15 b8       	out	0x05, r1	; 5
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <patroonTonen+0x22>
  a6:	2f c0       	rjmp	.+94     	; 0x106 <patroonTonen+0x86>
		_delay_us(750);
	}
	if (patroon == 2)
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	91 05       	cpc	r25, r1
  ac:	c1 f4       	brne	.+48     	; 0xde <patroonTonen+0x5e>
	{
		// multiplexen, coooode
		// ruit
		// met potmeter: toont negatief van oorspronkelijk ruitje
		PORTD = 0b01010000;
  ae:	80 e5       	ldi	r24, 0x50	; 80
  b0:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b10101000; // 4 stippen (vierkantje)
  b2:	88 ea       	ldi	r24, 0xA8	; 168
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	28 ee       	ldi	r18, 0xE8	; 232
  b8:	33 e0       	ldi	r19, 0x03	; 3
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <patroonTonen+0x3c>
		_delay_us(500);

		PORTD = 0b00100000;
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b01110000; // 2 stippen buitenste rand, horizontaal langs witte strip draden
  c4:	80 e7       	ldi	r24, 0x70	; 112
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <patroonTonen+0x4a>
		_delay_us(500);

		PORTD = 0b10001000;
  ce:	88 e8       	ldi	r24, 0x88	; 136
  d0:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b11011000; // 2 stippen buitenste rand, verticaal langs witte strip draden
  d2:	88 ed       	ldi	r24, 0xD8	; 216
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	f9 01       	movw	r30, r18
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <patroonTonen+0x58>
  dc:	19 c0       	rjmp	.+50     	; 0x110 <patroonTonen+0x90>
		_delay_us(500);
	}
	if (patroon == 3)
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	49 f4       	brne	.+18     	; 0xf6 <patroonTonen+0x76>
	{
		// lijnen parallel aan groen, startend op rand
		// 		met potmeter: niet startend op de rand (negatief)
		PORTD = 0b11111000;
  e4:	88 ef       	ldi	r24, 0xF8	; 248
  e6:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b01010000;
  e8:	80 e5       	ldi	r24, 0x50	; 80
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	e8 eb       	ldi	r30, 0xB8	; 184
  ee:	fb e0       	ldi	r31, 0x0B	; 11
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <patroonTonen+0x70>
  f4:	18 c0       	rjmp	.+48     	; 0x126 <patroonTonen+0xa6>
		_delay_us(langsteTijd);
	}
	if (patroon == 4)
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	91 05       	cpc	r25, r1
  fa:	29 f4       	brne	.+10     	; 0x106 <patroonTonen+0x86>
	{
		// lijnen parallel aan groen, niet startend op rand
		// 		met potmeter: WEL startend op de rand (negatief)
		PORTD = 0b11111000;
  fc:	88 ef       	ldi	r24, 0xF8	; 248
  fe:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b10101000;
 100:	88 ea       	ldi	r24, 0xA8	; 168
 102:	85 b9       	out	0x05, r24	; 5
 104:	0b c0       	rjmp	.+22     	; 0x11c <patroonTonen+0x9c>
		_delay_us(langsteTijd);
	}
	if (patroon == 5)
 106:	45 30       	cpi	r20, 0x05	; 5
 108:	51 05       	cpc	r21, r1
 10a:	11 f4       	brne	.+4      	; 0x110 <patroonTonen+0x90>
	{
		// multiplexen, coooode
		// lijnen parallel aan wit, startend op rand
		// 		met potmeter: geen leds
		PORTD = 0b10101000;
 10c:	88 ea       	ldi	r24, 0xA8	; 168
 10e:	04 c0       	rjmp	.+8      	; 0x118 <patroonTonen+0x98>
		PORTB = 0b00000000;
		_delay_us(langsteTijd);		// 50 ms staat gelijk aan 2min, 8seconden
	}
	if (patroon == 6)
 110:	46 30       	cpi	r20, 0x06	; 6
 112:	51 05       	cpc	r21, r1
 114:	41 f4       	brne	.+16     	; 0x126 <patroonTonen+0xa6>
	{
		// lijnen parallel aan wit, niet startend op rand
		// 		met potmeter: geen leds
		PORTD = 0b01010000;
 116:	80 e5       	ldi	r24, 0x50	; 80
 118:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000000; // NIET startend op rand
 11a:	15 b8       	out	0x05, r1	; 5
 11c:	88 eb       	ldi	r24, 0xB8	; 184
 11e:	9b e0       	ldi	r25, 0x0B	; 11
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <patroonTonen+0xa0>
 124:	08 95       	ret
		_delay_us(langsteTijd);
	}
	if (patroon == 7)
 126:	47 30       	cpi	r20, 0x07	; 7
 128:	51 05       	cpc	r21, r1
 12a:	41 f4       	brne	.+16     	; 0x13c <patroonTonen+0xbc>
	{
		// multiplexen, coooode
		// vierkantje (gevuld)
		// 		met potmeter: toont alleen 2x3 leds parallel aan de groene draden,
		// 		ter hoogte van oorspronkelijk klein vierkantje
		PORTD = 0b01110000;
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b10001000;
 130:	88 e8       	ldi	r24, 0x88	; 136
 132:	85 b9       	out	0x05, r24	; 5
 134:	88 eb       	ldi	r24, 0xB8	; 184
 136:	9b e0       	ldi	r25, 0x0B	; 11
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <patroonTonen+0xb8>
		_delay_us(langsteTijd); // tijd rekken voor tonen van patroon
	}
}
 13c:	08 95       	ret

0000013e <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
	DDRD = 0b11111000; // blauw || groen
 142:	88 ef       	ldi	r24, 0xF8	; 248
 144:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11111000; // geel || wit
 146:	84 b9       	out	0x04, r24	; 4
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for( i=0;i<6;i++) // i = 3, == 1 seconden realtime
		{

			// patroon tonen, methode ophalen
			patroonTonen(patroon);
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 40 00 	call	0x80	; 0x80 <patroonTonen>
	int patroon = 1; // reset naar eerste patroon, voor het leesgemak begint patroon bij 1 (patroon 1, patroon 2 enz enz)
	int i; // snelheid teller

	while(1)
	{
		for( i=0;i<6;i++) // i = 3, == 1 seconden realtime
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	c6 30       	cpi	r28, 0x06	; 6
 158:	d1 05       	cpc	r29, r1
 15a:	b4 f7       	brge	.-20     	; 0x148 <main+0xa>
 15c:	f7 cf       	rjmp	.-18     	; 0x14c <main+0xe>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
